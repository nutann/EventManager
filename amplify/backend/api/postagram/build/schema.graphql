
type Post {
  id: ID!
  name: String!
  location: String!
  description: String!
  image: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type User {
  id: ID!
  type: String!
  userName: String!
  email: String!
  image: String
  location: String
  bio: String
  phone: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Vendor {
  id: ID!
  userID: ID!
  vendorID: ID!
  user: User
  vendorCategory: VendorCategory
  longitude: String
  latitude: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  vendorUserId: ID
  vendorVendorCategoryId: ID
}

type VendorCategory {
  id: ID!
  vendorType: String!
  vendorSubCategory: [String]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Passcode @aws_cognito_user_pools {
  id: ID!
  pass_code: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPostConnection {
  items: [Post]!
  nextToken: String
}

input ModelPostFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  location: ModelStringInput
  description: ModelStringInput
  image: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

type Query {
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getVendor(id: ID!): Vendor
  listVendors(filter: ModelVendorFilterInput, limit: Int, nextToken: String): ModelVendorConnection
  getVendorCategory(id: ID!): VendorCategory
  listVendorCategories(filter: ModelVendorCategoryFilterInput, limit: Int, nextToken: String): ModelVendorCategoryConnection
  userbyEmail(email: String!, sortDirection: ModelSortDirection, filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  vendorbyUserID(userID: ID!, sortDirection: ModelSortDirection, filter: ModelVendorFilterInput, limit: Int, nextToken: String): ModelVendorConnection
  getPasscode(id: ID!): Passcode @aws_cognito_user_pools
  listPasscodes(filter: ModelPasscodeFilterInput, limit: Int, nextToken: String): ModelPasscodeConnection @aws_cognito_user_pools
}

input ModelPostConditionInput {
  name: ModelStringInput
  location: ModelStringInput
  description: ModelStringInput
  image: ModelStringInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
}

input CreatePostInput {
  id: ID
  name: String!
  location: String!
  description: String!
  image: String
}

input UpdatePostInput {
  id: ID!
  name: String
  location: String
  description: String
  image: String
}

input DeletePostInput {
  id: ID!
}

type Mutation {
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createVendor(input: CreateVendorInput!, condition: ModelVendorConditionInput): Vendor
  updateVendor(input: UpdateVendorInput!, condition: ModelVendorConditionInput): Vendor
  deleteVendor(input: DeleteVendorInput!, condition: ModelVendorConditionInput): Vendor
  createVendorCategory(input: CreateVendorCategoryInput!, condition: ModelVendorCategoryConditionInput): VendorCategory
  updateVendorCategory(input: UpdateVendorCategoryInput!, condition: ModelVendorCategoryConditionInput): VendorCategory
  deleteVendorCategory(input: DeleteVendorCategoryInput!, condition: ModelVendorCategoryConditionInput): VendorCategory
  createPasscode(input: CreatePasscodeInput!, condition: ModelPasscodeConditionInput): Passcode @aws_cognito_user_pools
  updatePasscode(input: UpdatePasscodeInput!, condition: ModelPasscodeConditionInput): Passcode @aws_cognito_user_pools
  deletePasscode(input: DeletePasscodeInput!, condition: ModelPasscodeConditionInput): Passcode @aws_cognito_user_pools
}

type Subscription {
  onCreatePost: Post @aws_subscribe(mutations: ["createPost"])
  onUpdatePost: Post @aws_subscribe(mutations: ["updatePost"])
  onDeletePost: Post @aws_subscribe(mutations: ["deletePost"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateVendor: Vendor @aws_subscribe(mutations: ["createVendor"])
  onUpdateVendor: Vendor @aws_subscribe(mutations: ["updateVendor"])
  onDeleteVendor: Vendor @aws_subscribe(mutations: ["deleteVendor"])
  onCreateVendorCategory: VendorCategory @aws_subscribe(mutations: ["createVendorCategory"])
  onUpdateVendorCategory: VendorCategory @aws_subscribe(mutations: ["updateVendorCategory"])
  onDeleteVendorCategory: VendorCategory @aws_subscribe(mutations: ["deleteVendorCategory"])
  onCreatePasscode: Passcode @aws_subscribe(mutations: ["createPasscode"]) @aws_cognito_user_pools
  onUpdatePasscode: Passcode @aws_subscribe(mutations: ["updatePasscode"]) @aws_cognito_user_pools
  onDeletePasscode: Passcode @aws_subscribe(mutations: ["deletePasscode"]) @aws_cognito_user_pools
}

type ModelUserConnection {
  items: [User]!
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDInput
  type: ModelStringInput
  userName: ModelStringInput
  email: ModelStringInput
  image: ModelStringInput
  location: ModelStringInput
  bio: ModelStringInput
  phone: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input ModelUserConditionInput {
  type: ModelStringInput
  userName: ModelStringInput
  email: ModelStringInput
  image: ModelStringInput
  location: ModelStringInput
  bio: ModelStringInput
  phone: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

input CreateUserInput {
  id: ID
  type: String!
  userName: String!
  email: String!
  image: String
  location: String
  bio: String
  phone: String
}

input UpdateUserInput {
  id: ID!
  type: String
  userName: String
  email: String
  image: String
  location: String
  bio: String
  phone: String
}

input DeleteUserInput {
  id: ID!
}

type ModelVendorConnection {
  items: [Vendor]!
  nextToken: String
}

input ModelVendorFilterInput {
  id: ModelIDInput
  userID: ModelIDInput
  vendorID: ModelIDInput
  longitude: ModelStringInput
  latitude: ModelStringInput
  and: [ModelVendorFilterInput]
  or: [ModelVendorFilterInput]
  not: ModelVendorFilterInput
  vendorUserId: ModelIDInput
  vendorVendorCategoryId: ModelIDInput
}

input ModelVendorConditionInput {
  userID: ModelIDInput
  vendorID: ModelIDInput
  longitude: ModelStringInput
  latitude: ModelStringInput
  and: [ModelVendorConditionInput]
  or: [ModelVendorConditionInput]
  not: ModelVendorConditionInput
  vendorUserId: ModelIDInput
  vendorVendorCategoryId: ModelIDInput
}

input CreateVendorInput {
  id: ID
  userID: ID!
  vendorID: ID!
  longitude: String
  latitude: String
  vendorUserId: ID
  vendorVendorCategoryId: ID
}

input UpdateVendorInput {
  id: ID!
  userID: ID
  vendorID: ID
  longitude: String
  latitude: String
  vendorUserId: ID
  vendorVendorCategoryId: ID
}

input DeleteVendorInput {
  id: ID!
}

type ModelVendorCategoryConnection {
  items: [VendorCategory]!
  nextToken: String
}

input ModelVendorCategoryFilterInput {
  id: ModelIDInput
  vendorType: ModelStringInput
  vendorSubCategory: ModelStringInput
  and: [ModelVendorCategoryFilterInput]
  or: [ModelVendorCategoryFilterInput]
  not: ModelVendorCategoryFilterInput
}

input ModelVendorCategoryConditionInput {
  vendorType: ModelStringInput
  vendorSubCategory: ModelStringInput
  and: [ModelVendorCategoryConditionInput]
  or: [ModelVendorCategoryConditionInput]
  not: ModelVendorCategoryConditionInput
}

input CreateVendorCategoryInput {
  id: ID
  vendorType: String!
  vendorSubCategory: [String]
}

input UpdateVendorCategoryInput {
  id: ID!
  vendorType: String
  vendorSubCategory: [String]
}

input DeleteVendorCategoryInput {
  id: ID!
}

type ModelPasscodeConnection @aws_cognito_user_pools {
  items: [Passcode]!
  nextToken: String
}

input ModelPasscodeFilterInput {
  id: ModelIDInput
  pass_code: ModelIntInput
  and: [ModelPasscodeFilterInput]
  or: [ModelPasscodeFilterInput]
  not: ModelPasscodeFilterInput
}

input ModelPasscodeConditionInput {
  pass_code: ModelIntInput
  and: [ModelPasscodeConditionInput]
  or: [ModelPasscodeConditionInput]
  not: ModelPasscodeConditionInput
}

input CreatePasscodeInput {
  id: ID
  pass_code: Int
}

input UpdatePasscodeInput {
  id: ID!
  pass_code: Int
}

input DeletePasscodeInput {
  id: ID!
}

